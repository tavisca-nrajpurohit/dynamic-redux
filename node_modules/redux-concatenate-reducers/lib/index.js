'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = concatenateReducers;

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isObject(value) {
  return typeof value !== 'undefined' && value !== null && value.constructor === Object;
}

function concatenateReducers(reducers) {
  var empty = reducers.length == 0;
  function applyNextState(previousState, nextState) {
    if (isObject(previousState) && isObject(nextState)) {
      return (0, _objectAssign2.default)(previousState, nextState);
    } else {
      return nextState;
    }
  }
  function checkHasChanged(previousState, nextState) {
    if (isObject(previousState) && isObject(nextState)) {
      if (previousState === nextState) {
        return false;
      } else {
        var keys = Object.keys(nextState);
        for (var i = 0; i < keys.length; i++) {
          if (previousState[keys[i]] !== nextState[keys[i]]) {
            return true;
          }
        }
        return false;
      }
    } else {
      return previousState !== nextState;
    }
  }
  return function (state, action) {
    if (empty) {
      throw Error('There are no reducers');
    }
    var finalNextState = isObject(state) ? (0, _objectAssign2.default)({}, state) : state;
    var hasChanged = false;
    function getPreviousState() {
      return typeof state === 'undefined' ? state : finalNextState;
    }
    for (var i = 0; i < reducers.length; i++) {
      var nextState = reducers[i](getPreviousState(), action);
      if (checkHasChanged(finalNextState, nextState)) {
        hasChanged = true;
        finalNextState = applyNextState(finalNextState, nextState);
      }
    }

    return hasChanged ? finalNextState : state;
  };
}